import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QDial, QLabel, QPushButton
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer
from PyQt5.QtGui import QMovie
import serial

class ActuatorControlApp(QWidget):
    def __init__(self):
        super().__init__()

        # Connect to Arduino
        self.ser = serial.Serial('COM3', 9600)  # Replace 'COM3' with the appropriate port

        self.init_ui()

    def init_ui(self):
        self.setWindowTitle('Actuator Control')

        # Create circular knobs for roll and pitch
        self.roll_knob = QDial(self)
        self.roll_knob.setNotchesVisible(True)
        self.roll_knob.setMinimum(0)
        self.roll_knob.setMaximum(20)
        self.roll_knob.setValue(0)

        self.pitch_knob = QDial(self)
        self.pitch_knob.setNotchesVisible(True)
        self.pitch_knob.setMinimum(0)
        self.pitch_knob.setMaximum(20)
        self.pitch_knob.setValue(0)

        # Create labels for animated GIFs
        self.roll_label = QLabel(self)
        self.roll_gif = QMovie("roll.gif")
        self.roll_label.setMovie(self.roll_gif)

        self.pitch_label = QLabel(self)
        self.pitch_gif = QMovie("pitch.gif")
        self.pitch_label.setMovie(self.pitch_gif)

        # Button to update actuator positions
        self.update_button = QPushButton('Update Positions', self)
        self.update_button.clicked.connect(self.update_positions)

        # Button to close the serial connection
        self.close_button = QPushButton('Close Connection', self)
        self.close_button.clicked.connect(self.close_connection)

        # Layout
        layout = QVBoxLayout()
        layout.addWidget(self.roll_knob)
        layout.addWidget(self.roll_label)
        layout.addWidget(self.pitch_knob)
        layout.addWidget(self.pitch_label)
        layout.addWidget(self.update_button)
        layout.addWidget(self.close_button)

        self.setLayout(layout)

        # Start GIF animation threads
        self.roll_thread = GifThread(self.roll_gif)
        self.pitch_thread = GifThread(self.pitch_gif)

    def update_positions(self):
        roll_value = self.roll_knob.value()
        pitch_value = self.pitch_knob.value()

        # Start GIF animations
        self.roll_thread.start()
        self.pitch_thread.start()

        # Perform calculations or mapping based on roll and pitch values
        # Adjust the following lines based on your specific requirements
        actuator1_pos = roll_value + pitch_value
        actuator2_pos = roll_value - pitch_value
        actuator3_pos = -roll_value + pitch_value
        actuator4_pos = -roll_value - pitch_value

        # Send positions to Arduino
        self.ser.write(f"{actuator1_pos},{actuator2_pos},{actuator3_pos},{actuator4_pos}\n".encode())

        # Stop GIF animations after a delay (adjust as needed)
        QTimer.singleShot(3000, self.stop_gif_animations)

    def stop_gif_animations(self):
        self.roll_thread.stop()
        self.pitch_thread.stop()

    def close_connection(self):
        self.ser.close()

class GifThread(QThread):
    def __init__(self, movie):
        super().__init__()
        self.movie = movie

    def run(self):
        self.movie.start()
        self.exec_()

    def stop(self):
        self.movie.stop()
        self.quit()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    main_app = ActuatorControlApp()
    main_app.show()
    sys.exit(app.exec_())
